# Deploys a terraform infrastructure to !PRODUCTION! whenever a 
# branch is pushed to main.
#
# Note: You should use a branch protection rule to enforce that
# main is only pushed via a PR per the team git standards
on:
  push:
    # only on pushes to main
    branches:
      - "main"
    # only if TF files changes
    paths:
      - "**.tf"
      - "**.tfvars"
jobs:
  tf-prod-cicd:
    # this is the part that makes the workflow run ONLY on a PR merge, not just a
    # push to main
    name: Infrastructure Jobs (prod)
    runs-on: ubuntu-latest
    steps:

      # checkout the repo (complete, not shallow, for yor's blame checking)
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # this is required for yor tagging. yor needs historical information
          # to make decissions about git_* tags
          fetch-depth: 0

      # Insert tags into TF resources, custom tages from .tag_config.yml and the
      # tag groups for yor and git. Note, this happens during the work flow and
      # puts the remote main branch one commit ahead of your local main branch.
      # So, after the workflow runs, you need to git pull your local main branch
      # (or completely destry ant git checkout the repo again)
      - name: TF tagging (yor)
        uses: bridgecrewio/yor-action@main
        with:
          parsers: Terraform
          config_file: .tag_config.yml

      # Setup terraform using the hashicorp action. This just install terraform
      # into the temporary working space.
      - name: TF Setup (prod)
        uses: hashicorp/setup-terraform@v3


      # Initialize terraform modules, etc. Note that it is using the AWS credentials stored in the github
      # secrets.
      - name: TF Init (prod)
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: '.'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET }}
          TF_CLI_ARGS: '-var-file="env/prod.tfvars" -backend-config="bucket=${{ secrets.AWS_PROD_TFSTATE_S3 }}"'

      # Validate the TF HCL syntax
      - name: TF Validate (prod)
        run: terraform validate

      # TF plan. Note that it is using the AWS credentials stored in the github
      # secrets.
      - name: TF Plan (prod)
        run: terraform plan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: '.'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET }}
          TF_CLI_ARGS: '-var-file="env/prod.tfvars"'

      # Finally, apply the terraform to production.
      - name: TF Apply (prod)
        run: terraform apply -auto-approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: '.'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET }}
          TF_CLI_ARGS: '-var-file="env/prod.tfvars"'

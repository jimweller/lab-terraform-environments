# Destroys terraform infrastructure in a dev environment any time that a branch
# is deleted (that is not "main"), e.g. when a PR is merged or a dev branch is
# deleted on the remote
name: DEV Terraform CI/CD Cleanup
on:
  delete:
    # run for any branch deletion except main
    branches:
      - "**"
      - "!main"
    # only if TF files change
    paths:
      - "**.tf"
      - "**.tfvars"
jobs:
  tf-dev-cleanup-pr:
    name: TF Cleanup (dev)
    runs-on: ubuntu-latest
    steps:
    
      # check out the repo (shallow)
      - name: Checkout Repo
        uses: actions/checkout@v4

      # Setup terraform using the hashicorp action. This just install terraform
      # into the temporary working space.
      - name: TF Setup
        uses: hashicorp/setup-terraform@v3

      # Initialize terraform modules, etc. Note that it is using the AWS credentials stored in the github
      # secrets.
      - name: TF Init
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: '.'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEV_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEV_SECRET }}
          TF_CLI_ARGS: '-var-file="env/dev.tfvars" -backend-config="bucket=${{ secrets.AWS_DEV_TFSTATE_S3 }}"'

      # Destroy the resources in the AWS dev environment.
      - name: TF Destroy
        run: terraform destroy -auto-approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: '.'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEV_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEV_SECRET }}
          TF_CLI_ARGS: '-var-file="env/dev.tfvars"'


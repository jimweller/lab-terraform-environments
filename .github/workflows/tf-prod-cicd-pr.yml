# Deploys a terraform infrastructure to !PRODUCTION! whenever a PR is merged
name: Terraform PROD CI/CD Pipeline
on:
  # Triggers the workflow on PR but only for the main
  # branch and only for files that merit running terraform.
  # and only if it the PR is merged (see IF below)
  pull_request:
    types:
      - closed
    branches:
      - "main"
    paths:
      - "**.tf"
      - "**.tfvars"
jobs:
  tf-prod-cicd:
    # this is the part that makes the workflow run ONLY on a PR merge, not just a
    # push to main
    if: github.event.pull_request.merged == true
    name: Infrastructure Jobs (prod)
    runs-on: ubuntu-latest
    steps:
    #   - name: Jim DEBUG
    #     run: |
    #       echo DEBUG
    #       echo "${{ github.event.pull_request.merged }} : " ${{ github.event.pull_request.merged }}
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: TF tagging (yor)
        uses: bridgecrewio/yor-action@main
#        env:
#          LOG_LEVEL: DEBUG
        with:
          parsers: Terraform
          config_file: .tag_config.yml

      - name: TF Setup
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: '.'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET }}
          TF_CLI_ARGS: '-var-file="env/prod.tfvars" -backend-config="bucket=${{ secrets.AWS_PROD_TFSTATE_S3 }}"'

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: '.'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET }}
          TF_CLI_ARGS: '-var-file="env/prod.tfvars"'

      - name: TF Apply
        run: terraform apply -auto-approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: '.'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET }}
          TF_CLI_ARGS: '-var-file="env/prod.tfvars"'
